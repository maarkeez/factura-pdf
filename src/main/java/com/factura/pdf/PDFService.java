package com.factura.pdf;

import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDDocumentInformation;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;

public class PDFService {

	private static final PDFService singleton = new PDFService();
	private static final float WIDTH_MARGIN = 5;
	private static final float LINE_DELIMITER = 10;
	private float actualHeight;
	private float width;

	public static PDFService singleton() {
		return singleton;
	}

	public synchronized void createPdf(String title, String path) throws IOException {

		PDDocument document = new PDDocument();
		PDPage page = new PDPage();
		document.addPage(page);
		actualHeight = page.getCropBox().getHeight();
		width = page.getCropBox().getWidth();

		// Instantiating the PDPageContentStream class
		PDPageContentStream contentStream = new PDPageContentStream(document, page);

		addInfo(title, document);
		addHeader(contentStream);
		addText(contentStream);
		addText(contentStream);

		List<String> fila = Arrays.asList("caca1", "caca2", "caca3");
		List<String> headers = new ArrayList<String>(Arrays.asList("caca1", "caca2", "caca3"));
		List<List<String>> body = new ArrayList<List<String>>();
		body.add(fila);
		body.add(fila);
		body.add(fila);
		body.add(fila);
		body.add(fila);
		body.add(fila);
		body.add(fila);
		body.add(fila);
		body.add(fila);
		body.add(fila);
		body.add(fila);

		PDFTable table = new PDFTable(headers, body);
		addTable(table, contentStream);
		addText(contentStream);

		contentStream.close();

		document.save(path);
		document.close();

	}

	private void addInfo(String title, PDDocument document) throws IOException {
		PDDocumentInformation info = new PDDocumentInformation();
		info.setTitle(title);
		info.setAuthor("Autogenerated by factura pdf library");
		info.setCreationDate(Calendar.getInstance());
		document.setDocumentInformation(info);
	}

	private void addHeader(PDPageContentStream contentStream) throws IOException {

		// Setting the non stroking color
		contentStream.setNonStrokingColor(Color.DARK_GRAY);

		// Drawing a rectangle for header
		float headerWidth = width - 2 * WIDTH_MARGIN;
		float headerHeight = 50;

		contentStream.addRect(WIDTH_MARGIN, getActualHeight() - headerHeight, headerWidth, headerHeight);

		decreaseActualHeight(headerHeight);

		// Drawing a rectangle
		contentStream.fill();
		contentStream.setNonStrokingColor(Color.BLACK);

	}

	private void addText(PDPageContentStream contentStream) throws IOException {
		// Begin the Content stream
		contentStream.beginText();

		// Setting the font to the Content stream
		contentStream.setFont(PDType1Font.HELVETICA, 10);

		// Setting the position for the line
		contentStream.newLineAtOffset(WIDTH_MARGIN, getActualHeight());
		decreaseActualHeight(0);
		String text = "This is the sample document and we are adding content to it.";

		// Adding text in the form of string
		contentStream.showText(text);

		// Ending the content stream
		contentStream.endText();

	}

	private void addTableText(PDPageContentStream contentStream, String text, float x, float y) throws IOException {
		contentStream.setNonStrokingColor(Color.BLACK);

		// Begin the Content stream
		contentStream.beginText();

		// Setting the font to the Content stream
		contentStream.setFont(PDType1Font.HELVETICA, 10);

		// Setting the position for the line
		contentStream.newLineAtOffset(x, y);

		// Adding text in the form of string
		contentStream.showText(text);

		// Ending the content stream
		contentStream.endText();

	}

	private void decreaseActualHeight(float y) {
		y = y + LINE_DELIMITER;
		actualHeight -= y;
	}

	private void decreaseActualHeightWithoutDel(float y) {
		actualHeight -= y;
	}

	private float getActualHeight() {
		return actualHeight;
	}

	private void addTable(PDFTable table, PDPageContentStream contentStream) throws IOException {
		float cellHeight = 20;
		float lineWidth = 1;
		int numberOfCells = table.getColsCount();
		float cellWidth = (this.width - WIDTH_MARGIN * 2) / numberOfCells;

		// Añadir cabecera
		float x_head = WIDTH_MARGIN;
		float y_head = getActualHeight() - cellHeight;
		for (int i = 0; i < numberOfCells; i++) {
			contentStream.addRect(x_head, y_head, cellWidth, cellHeight);
			contentStream.setLineWidth(lineWidth);
			contentStream.setNonStrokingColor(Color.WHITE);
			contentStream.setStrokingColor(Color.BLACK);
			contentStream.stroke();

			addTableText(contentStream, table.getHeaders().get(i), x_head + 2, y_head + 5);

			x_head += cellWidth;
		}
		decreaseActualHeightWithoutDel(cellHeight);
		contentStream.fill();

		// Añadir cuerpo
		for (int rowCount = 0; rowCount < table.getRowsCount(); rowCount++) {

			float x = WIDTH_MARGIN;
			float y = getActualHeight() - cellHeight;

			for (int i = 0; i < numberOfCells; i++) {
				// Setting the non stroking color
				contentStream.addRect(x, y, cellWidth, cellHeight);
				contentStream.setLineWidth(lineWidth);
				contentStream.setNonStrokingColor(Color.WHITE);
				contentStream.setStrokingColor(Color.BLACK);
				contentStream.stroke();

				addTableText(contentStream, table.getBody().get(i).get(i), x + 2, y + 5);

				x += cellWidth;
			}

			decreaseActualHeightWithoutDel(cellHeight);

			// Drawing a rectangle
			contentStream.fill();
		}
		contentStream.setNonStrokingColor(Color.BLACK);
		decreaseActualHeight(0);
	}
}
